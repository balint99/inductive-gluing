
----------------------------------------------
-- Bool
----------------------------------------------

-- STT, non-dependent eliminator

data PBool : Tm ∙ Bool → Set where
  Ptrue :  PBool true
  Pfalse : PBool false

indPBool : ∀ {i} (P : ∀ {t} → PBool t → Set i)
         → P Ptrue → P Pfalse
         → ∀ {t}(tₚ : PBool t) → P tₚ
indPBool P uₚ vₚ Ptrue  = uₚ
indPBool P uₚ vₚ Pfalse = vₚ

recPBool : ∀ {i} (A : Tm ∙ Bool → Set i)
         → A true → A false
         → ∀ {t} → PBool t → A t
recPBool A uₚ vₚ tₚ = indPBool (λ {t} _ → A t) uₚ vₚ tₚ

Bool-Prec : ∀ {i A} (Aₚ : Tm ∙ A → Set i)
            {t : Tm ∙ Bool}{u v : Tm ∙ A}
          → PBool t → Aₚ u → Aₚ v → Aₚ (if t u v)
Bool-Prec Aₚ {t}{u}{v} tₚ uₚ vₚ = recPBool (λ t → Aₚ (if t u v)) uₚ vₚ tₚ

if : ∀ {Γ A} → Tm Γ Bool → Tm Γ A → Tm Γ A → Tm Γ A
if true  u v = u
if false u v = v
(if t u v)[σ] = if (t[σ]) (u[σ]) (v[σ])

ifₚ : ∀ {Γ A t u v}{Γₚ : Sub ∙ Γ → Set}{Aₚ : Tm ∙ A → Set}
    → (∀ {ν} → Γₚ ν → PBool (t[ν]))
    → (∀ {ν} → Γₚ ν → Aₚ (u[ν]))
    → (∀ {ν} → Γₚ ν → Aₚ (v[ν]))
    → ∀ {ν} → Γₚ ν → Aₚ (if (t[ν]) (u[ν]) (v[ν]))
ifₚ = λ { {Aₚ = Aₚ} tₚ uₚ vₚ γₚ → Bool-Prec Aₚ (tₚ γₚ) (uₚ γₚ) (vₚ γₚ) }

-- DTT, non-dependent eliminator

data PBool : Tm ∙ Bool → Set where
  Ptrue :  PBool true
  Pfalse : PBool false

indPBool : ∀ {i} (P : ∀ {t} → PBool t → Set i)
         → P Ptrue → P Pfalse
         → ∀ {t}(tₚ : PBool t) → P tₚ
indPBool P uₚ vₚ Ptrue  = uₚ
indPBool P uₚ vₚ Pfalse = vₚ

recPBool : ∀ {i} (A : Tm ∙ Bool → Set i)
         → A true → A false
         → ∀ {t} → PBool t → A t
recPBool A uₚ vₚ tₚ = indPBool (λ {t} _ → A t) uₚ vₚ tₚ

Bool-Prec : ∀ {i A} (Aₚ : Tm ∙ A → Set i)
            {t : Tm ∙ Bool}{u v : Tm ∙ A}
          → PBool t → Aₚ u → Aₚ v → Aₚ (if t u v)
Bool-Prec Aₚ {t}{u}{v} tₚ uₚ vₚ = recPBool (λ t → Aₚ (if t u v)) uₚ vₚ tₚ

if : ∀ {Γ A} → Tm Γ Bool → Tm Γ A → Tm Γ A → Tm Γ A
if true  u v = u
if false u v = v
(if t u v)[σ] = if (t[σ]) (u[σ]) (v[σ])

Boolₚ : ∀ {ν} → Γₚ ν → Tm ∙ Bool → Set
Boolₚ = λ _ → PBool

ifₚ : ∀ {i Γ A t u v}{Γₚ : Sub ∙ Γ → Set}{Aₚ : ∀ {ν} → Γₚ ν → Tm ∙ (A[ν]) → Set i}
    → (∀ {ν}(γₚ : Γₚ ν) → PBool (t[ν]))
    → (∀ {ν}(γₚ : Γₚ ν) → Aₚ γₚ (u[ν]))
    → (∀ {ν}(γₚ : Γₚ ν) → Aₚ γₚ (v[ν]))
    → ∀ {ν}(γₚ : Γₚ ν) → Aₚ γₚ (if (t[ν]) (u[ν]) (v[ν]))
ifₚ = λ { {Aₚ = Aₚ} tₚ uₚ vₚ γₚ → Bool-Prec (Aₚ γₚ) (tₚ γₚ) (uₚ γₚ) (vₚ γₚ) }

-- DTT, dependent eliminator

data PBool : Tm ∙ Bool → Set where
  Ptrue :  PBool true
  Pfalse : PBool false

indPBool : ∀ {i} (P : ∀ {t} → PBool t → Set i)
         → P Ptrue → P Pfalse
         → ∀ {t}(tₚ : PBool t) → P tₚ
indPBool P uₚ vₚ Ptrue  = uₚ
indPBool P uₚ vₚ Pfalse = vₚ

Bool-Prec : ∀ {i}{C : Ty (∙ ▷ Bool)}(Cₚ : ∀ {t} → PBool t → Tm ∙ (C[id, t]) → Set i)
            {t : Tm ∙ Bool}{u : Tm ∙ (C[id, true])}{v : Tm ∙ (C[id, false])}
          → (tₚ : PBool t)
          → Cₚ Ptrue u
          → Cₚ Pfalse v
          → Cₚ tₚ (if C t u v)
Bool-Prec Cₚ {t}{u}{v} tₚ uₚ vₚ = indPBool (λ {t} tₚ → Cₚ tₚ (if C t u v)) uₚ vₚ tₚ

if : ∀ {Γ}(C : Ty (Γ ▷ Bool)}
   → (t : Tm Γ Bool)
   → Tm Γ (C[id, true])
   → Tm Γ (C[id, false])
   → Tm Γ (C[id, t])
if true  u v = u
if false u v = v
(if C t u v)[σ] = if (C[σ⁺]) (t[σ]) (u[σ]) (v[σ])

Boolₚ : ∀ {ν} → Γₚ ν → Tm ∙ Bool → Set
Boolₚ = λ _ → PBool

ifₚ : ∀ {i Γ C t u v}{Γₚ : Sub ∙ Γ → Set}{Cₚ : ∀ {ν} → Σ (Γₚ (p ∘ ν)) (λ γₚ → PBool (q[ν])) → Tm ∙ (C[ν]) → Set i}
    → (tₚ : ∀ {ν}(γₚ : Γₚ ν) → PBool (t[ν]))
    → (∀ {ν}(γₚ : Γₚ ν) → Cₚ (γₚ, Ptrue) (u[ν]))
    → (∀ {ν}(γₚ : Γₚ ν) → Cₚ (γₚ, Pfalse) (v[ν]))
    → ∀ {ν}(γₚ : Γₚ ν) → Cₚ (γₚ, tₚ γₚ) (if (C[ν⁺]) (t[ν]) (u[ν]) (v[ν]))
ifₚ = λ { {Cₚ = Cₚ} tₚ uₚ vₚ {ν} γₚ → Bool-Prec {C = C[ν⁺]} (λ {t} tₚ → Cₚ {ν, t} (γₚ, tₚ)) (tₚ γₚ) (uₚ γₚ) (vₚ γₚ) }

----------------------------------------------
-- +
----------------------------------------------

-- STT, non-dependent eliminator

data _P+_ {i j A B}(Aₚ : Tm ∙ A → Set i)(Bₚ : Tm ∙ B → Set j)
     : Tm ∙ (A + B) → Set (i ⊔ j) where
  Pinl : ∀ {u} → Aₚ u → (Aₚ P+ Bₚ) (inl u)
  Pinr : ∀ {v} → Bₚ v → (Aₚ P+ Bₚ) (inr v)

indP+ : ∀ {i j k A B}{Aₚ : Tm ∙ A → Set i}{Bₚ : Tm ∙ B → Set j}
        (P : ∀ {t} → (Aₚ P+ Bₚ) t → Set k)
      → (∀ {u}(uₚ : Aₚ u) → P (Pinl uₚ))
      → (∀ {v}(vₚ : Bₚ v) → P (Pinr vₚ))
      → ∀ {t}(tₚ : (Aₚ P+ Bₚ) t) → P tₚ
indP+ P f g (Pinl uₚ) = f uₚ
indP+ P f g (Pinr vₚ) = g vₚ

recP+ : ∀ {i j k A B}{Aₚ : Tm ∙ A → Set i}{Bₚ : Tm ∙ B → Set j}
      	(C : Tm ∙ (A + B) → Set i)
      → (∀ {u} → Aₚ u → C (inl u))
      → (∀ {v} → Bₚ v → C (inr v))
      → ∀ {t} → (Aₚ P+ Bₚ) t → C t
recP+ A uₚ vₚ tₚ = indP+ (λ {t} _ → C t) uₚ vₚ tₚ

+-Prec : ∀ {i j k A B C}
         {Aₚ : Tm ∙ A → Set i}{Bₚ : Tm ∙ B → Set j}(Cₚ : Tm ∙ C → Set i)
         {u : Tm (∙ ▷ A) C}{v : Tm (∙ ▷ B) C}{t : Tm ∙ (A + B)}
       → (∀ {a} → Aₚ a → Cₚ (u[id, a]))
       → (∀ {b} → Bₚ b → Cₚ (v[id, b]))
       → (Aₚ P+ Bₚ) t → Cₚ (case u v t)
+-Prec Cₚ {u}{v} f g tₚ = recP+ (λ t → Cₚ (case u v t)) f g tₚ

case : ∀ {Γ A B C} → Tm (Γ ▷ A) C → Tm (Γ ▷ B) C → Tm Γ (A + B) → Tm Γ C
case u v (inl a) = u[id, a]
case u v (inr b) = v[id, b]
(case u v t)[σ] = case (u[σ⁺]) (v[σ⁺]) (t[σ])

_+ₚ_ : ∀ {A B} → (Tm ∙ A → Set) → (Tm ∙ B → Set) → Tm ∙ (A + B) → Set
Aₚ +ₚ Bₚ = Aₚ P+ Bₚ

caseₚ : ∀ {Γ A B C}{Γₚ : Sub ∙ Γ → Set}
      	{Aₚ : Tm ∙ A → Set}{Bₚ : Tm ∙ B → Set}{Cₚ : Tm ∙ C → Set}
	{u : Tm (Γ ▷ A) C}{v : Tm (Γ ▷ B) C}{t : Tm Γ (A + B)}
      → (∀ {ν} → Γₚ (p ∘ ν) × Aₚ (q[ν]) → Cₚ (u[ν]))
      → (∀ {ν} → Γₚ (p ∘ ν) × Bₚ (q[ν]) → Cₚ (v[ν]))
      → (∀ {ν} → Γₚ ν → (Aₚ P+ Bₚ) (t[ν]))
      → ∀ {ν} → Γₚ ν → Cₚ (case (u[ν⁺]) (v[ν⁺]) (t[ν]))
caseₚ {Cₚ = Cₚ} uₚ vₚ tₚ γₚ = +-Prec Cₚ (λ aₚ → uₚ (γₚ, aₚ)) (λ bₚ → vₚ (γₚ, bₚ)) (tₚ γₚ)

-- DTT, non-dependent eliminator

data _P+_ {i j A B}(Aₚ : Tm ∙ A → Set i)(Bₚ : Tm ∙ B → Set j)
     : Tm ∙ (A + B) → Set (i ⊔ j) where
  Pinl : ∀ {u} → Aₚ u → (Aₚ P+ Bₚ) (inl u)
  Pinr : ∀ {v} → Bₚ v → (Aₚ P+ Bₚ) (inr v)

indP+ : ∀ {i j k A B}{Aₚ : Tm ∙ A → Set i}{Bₚ : Tm ∙ B → Set j}
        (P : ∀ {t} → (Aₚ P+ Bₚ) t → Set k)
      → (∀ {u}(uₚ : Aₚ u) → P (Pinl uₚ))
      → (∀ {v}(vₚ : Bₚ v) → P (Pinr vₚ))
      → ∀ {t}(tₚ : (Aₚ P+ Bₚ) t) → P tₚ
indP+ P f g (Pinl uₚ) = f uₚ
indP+ P f g (Pinr vₚ) = g vₚ

recP+ : ∀ {i j k A B}{Aₚ : Tm ∙ A → Set i}{Bₚ : Tm ∙ B → Set j}
      	(C : Tm ∙ (A + B) → Set i)
      → (∀ {u} → Aₚ u → C (inl u))
      → (∀ {v} → Bₚ v → C (inr v))
      → ∀ {t} → (Aₚ P+ Bₚ) t → C t
recP+ A uₚ vₚ tₚ = indP+ (λ {t} _ → C t) uₚ vₚ tₚ

+-Prec : ∀ {i j k A B C}
         {Aₚ : Tm ∙ A → Set i}{Bₚ : Tm ∙ B → Set j}(Cₚ : Tm ∙ C → Set i)
         {u : Tm (∙ ▷ A) (C[p])}{v : Tm (∙ ▷ B) (C[p])}{t : Tm ∙ (A + B)}
       → (∀ {a} → Aₚ a → Cₚ (u[id, a]))
       → (∀ {b} → Bₚ b → Cₚ (v[id, b]))
       → (Aₚ P+ Bₚ) t → Cₚ (case u v t)
+-Prec Cₚ {u}{v} f g tₚ = recP+ (λ t → Cₚ (case u v t)) f g tₚ

case : ∀ {Γ A B C} → Tm (Γ ▷ A) (C[p]) → Tm (Γ ▷ B) (C[p]) → Tm Γ (A + B) → Tm Γ C
case u v (inl a) = u[id, a]
case u v (inr b) = v[id, b]
(case u v t)[σ] = case (u[σ⁺]) (v[σ⁺]) (t[σ])

_+ₚ_ : ∀ {A B}
     → (∀ {ν} → Γₚ ν → Tm ∙ (A[ν]) → Set i)
     → (∀ {ν} → Γₚ ν → Tm ∙ (B[ν]) → Set j)
     → ∀ {ν} → Γₚ ν → Tm ∙ (A[ν] + B[ν]) → Set (i ⊔ j)
Aₚ +ₚ Bₚ = λ γₚ → Aₚ γₚ P+ Bₚ γₚ

caseₚ : ∀ {Γ A B C u v t}{Γₚ : Sub ∙ Γ → Set a}
      	{Aₚ : ∀ {ν} → Γₚ ν → Tm ∙ (A[ν]) → Set i}
	{Bₚ : ∀ {ν} → Γₚ ν → Tm ∙ (B[ν]) → Set j}
	{Cₚ : ∀ {ν} → Γₚ ν → Tm ∙ (C[ν]) → Set k}
      → (∀ {ν}(γaₚ : Σ (Γₚ (p ∘ ν)) (λ γₚ → Aₚ γₚ (q[ν]))) → Cₚ (proj₁ γaₚ) (u[ν]))
      → (∀ {ν}(γbₚ : Σ (Γₚ (p ∘ ν)) (λ γₚ → Bₚ γₚ (q[ν]))) → Cₚ (proj₁ γbₚ) (v[ν]))
      → (∀ {ν}(γₚ : Γₚ ν) → (Aₚ γₚ P+ Bₚ γₚ) (t[ν]))
      → ∀ {ν}(γₚ : Γₚ ν) → Cₚ γₚ (case (u[ν⁺]) (v[ν⁺]) (t[ν]))
caseₚ {Cₚ = Cₚ} uₚ vₚ tₚ γₚ = +-Prec (Cₚ γₚ) (λ aₚ → uₚ (γₚ, aₚ)) (λ bₚ → vₚ (γₚ, bₚ)) (tₚ γₚ)

-- DTT, dependent eliminator

data _P+_ {i j A B}(Aₚ : Tm ∙ A → Set i)(Bₚ : Tm ∙ B → Set j)
     : Tm ∙ (A + B) → Set (i ⊔ j) where
  Pinl : ∀ {u} → Aₚ u → (Aₚ P+ Bₚ) (inl u)
  Pinr : ∀ {v} → Bₚ v → (Aₚ P+ Bₚ) (inr v)

indP+ : ∀ {i j k A B}{Aₚ : Tm ∙ A → Set i}{Bₚ : Tm ∙ B → Set j}
        (P : ∀ {t} → (Aₚ P+ Bₚ) t → Set k)
      → (∀ {u}(uₚ : Aₚ u) → P (Pinl uₚ))
      → (∀ {v}(vₚ : Bₚ v) → P (Pinr vₚ))
      → ∀ {t}(tₚ : (Aₚ P+ Bₚ) t) → P tₚ
indP+ P f g (Pinl uₚ) = f uₚ
indP+ P f g (Pinr vₚ) = g vₚ

+-Prec : ∀ {i j k A B}{C : Ty (∙ ▷ A + B)}
         {Aₚ : Tm ∙ A → Set i}{Bₚ : Tm ∙ B → Set j}
	 (Cₚ : ∀ {t} → (Aₚ P+ Bₚ) t → Tm ∙ (C[id, t]) → Set k)
         {u : Tm (∙ ▷ A) (C[p, inl 0])}{v : Tm (∙ ▷ B) (C[p, inr 0])}
	 {t : Tm ∙ (A + B)}
       → (∀ {a}(aₚ : Aₚ a) → Cₚ (Pinl aₚ) (u[id, a]))
       → (∀ {b}(bₚ : Bₚ b) → Cₚ (Pinr bₚ) (v[id, b]))
       → (tₚ : (Aₚ P+ Bₚ) t) → Cₚ tₚ (case C u v t)
+-Prec Cₚ {u}{v} f g tₚ = indP+ (λ {t} tₚ → Cₚ tₚ (case C u v t)) uₚ vₚ tₚ

inl : ∀ {Γ A B} → Tm Γ A → Tm Γ (A + B)
inr : ∀ {Γ A B} → Tm Γ B → Tm Γ (A + B)

case : ∀ {Γ A B}(C : Ty (Γ ▷ A + B))
     → Tm (Γ ▷ A) (C[p, inl 0])
     → Tm (Γ ▷ B) (C[p, inr 0])
     → (t : Tm Γ (A + B))
     → Tm Γ (C[id, t])
case C u v (inl a) = u[id, a]
case C u v (inr b) = v[id, b]
(case C u v t)[σ] = case (C[σ⁺]) (u[σ⁺]) (v[σ⁺]) (t[σ])

_+ₚ_ : ∀ {A B}
     → (∀ {ν} → Γₚ ν → Tm ∙ (A[ν]) → Set i)
     → (∀ {ν} → Γₚ ν → Tm ∙ (B[ν]) → Set j)
     → ∀ {ν} → Γₚ ν → Tm ∙ (A[ν] + B[ν]) → Set (i ⊔ j)
Aₚ +ₚ Bₚ = λ γₚ → Aₚ γₚ P+ Bₚ γₚ

inlₚ : ∀ {Γ A B u}{Γₚ : Sub ∙ Γ → Set a}
       {Aₚ : ∀ {ν} → Γₚ ν → Tm ∙ (A[ν]) → Set i}
       {Bₚ : ∀ {ν} → Γₚ ν → Tm ∙ (B[ν]) → Set j}
     → (∀ {ν}(γₚ : Γₚ ν) → Aₚ γₚ (u[ν]))
     → ∀ {ν}(γₚ : Γₚ ν) → (Aₚ γₚ P+ Bₚ γₚ) (inl (u[ν]))
inlₚ uₚ γₚ = Pinl (uₚ γₚ)

inlₚ : ∀ {Γ A B v}{Γₚ : Sub ∙ Γ → Set a}
       {Aₚ : ∀ {ν} → Γₚ ν → Tm ∙ (A[ν]) → Set i}
       {Bₚ : ∀ {ν} → Γₚ ν → Tm ∙ (B[ν]) → Set j}
     → (∀ {ν}(γₚ : Γₚ ν) → Bₚ γₚ (v[ν]))
     → ∀ {ν}(γₚ : Γₚ ν) → (Aₚ γₚ P+ Bₚ γₚ) (inr (v[ν]))
inlₚ vₚ γₚ = Pinr (vₚ γₚ)

caseₚ : ∀ {Γ A B C u v t}{Γₚ : Sub ∙ Γ → Set a}
      	{Aₚ : ∀ {ν} → Γₚ ν → Tm ∙ (A[ν]) → Set i}
	{Bₚ : ∀ {ν} → Γₚ ν → Tm ∙ (B[ν]) → Set j}
	{Cₚ : ∀ {ν} → Σ (Γₚ (p ∘ ν)) (λ γₚ → (Aₚ γₚ P+ Bₚ γₚ) (q[ν]))
	      	    → Tm ∙ (C[ν]) → Set k}
      → (∀ {ν}(γaₚ : Σ (Γₚ (p ∘ ν)) (λ γₚ → Aₚ γₚ (q[ν])))
         → Cₚ (proj₁ γaₚ, Pinl (proj₂ γaₚ)) (u[ν]))
      → (∀ {ν}(γbₚ : Σ (Γₚ (p ∘ ν)) (λ γₚ → Bₚ γₚ (q[ν])))
         → Cₚ (proj₁ γbₚ, Pinr (proj₂ γbₚ)) (v[ν]))
      → (tₚ : ∀ {ν}(γₚ : Γₚ ν) → (Aₚ γₚ P+ Bₚ γₚ) (t[ν]))
      → ∀ {ν}(γₚ : Γₚ ν) → Cₚ (γₚ, tₚ γₚ) (case (C[ν⁺]) (u[ν⁺]) (v[ν⁺]) (t[ν]))
caseₚ {Cₚ = Cₚ} uₚ vₚ tₚ {ν} γₚ = +-Prec {Aₚ γₚ}{Bₚ γₚ}(λ {t} tₚ → Cₚ {ν, t} (γₚ, tₚ))
  (λ aₚ → uₚ (γₚ, aₚ)) (λ bₚ → vₚ (γₚ, bₚ)) (tₚ γₚ)

----------------------------------------------
-- Nat
----------------------------------------------

-- STT, non-dependent eliminator

data PNat : Tm ∙ Nat → Set where
  Pzero : PNat zero
  Psuc  : ∀ {t} → PNat t → PNat (suc t)

indPNat : ∀ {i}(P : ∀ {t} → PNat t → Set i)
	→ P Pzero
	→ (∀ {t}{tₚ : PNat t} → P tₚ → P (Psuc tₚ))
	→ ∀ {t}(tₚ : PNat t) → P tₚ
indPNat P uₚ vₚ Pzero     = uₚ
indPNat P uₚ vₚ (Psuc tₚ) = vₚ (indPNat P uₚ vₚ tₚ)

recPNat : ∀ {i}(C : Tm ∙ Nat → Set i)
	→ C zero
	→ (∀ {t} → C t → C (suc t))
	→ ∀ {t} → PNat t → C t
recPNat C uₚ vₚ tₚ = indPNat (λ {t} _ → C t) uₚ (λ {t} _ → vₚ t) tₚ

Nat-Prec : ∀ {i C}(Cₚ : Tm ∙ C → Set i)
	   {u : Tm ∙ C}{v : Tm (∙ ▷ C) C}{t : Tm ∙ Nat}
	 → Cₚ u
	 → (∀ {c} → Cₚ c → Cₚ (v[id, c]))
	 → PNat t → Cₚ (rec u v t)
Nat-Prec Cₚ {u}{v} uₚ vₚ tₚ = recPNat (λ t → Cₚ (rec u v t)) uₚ vₚ tₚ

rec : ∀ {Γ C} → Tm Γ C → Tm (Γ ▷ C) C → Tm Γ Nat → Tm Γ C
rec u v zero    = u
rec u v (suc t) = v[id, rec u v t]
(rec u v t)[σ] = rec (u[σ]) (v[σ⁺]) (t[σ])

recₚ : ∀ {Γ C u v t}{Γₚ : Sub ∙ Γ → Set}{Cₚ : Tm ∙ C → Set}
     → (∀ {ν} → Γₚ ν → Cₚ (u[ν]))
     → (∀ {ν} → Γₚ (p ∘ ν) × Cₚ (q[ν]) → Cₚ (v[ν]))
     → (∀ {ν} → Γₚ ν → PNat (t[ν]))
     → ∀ {ν} → Γₚ ν → Cₚ (rec (u[ν]) (v[ν⁺]) (t[ν]))
recₚ {Cₚ = Cₚ} uₚ vₚ tₚ γₚ = Nat-Prec Cₚ (uₚ γₚ) (λ cₚ → vₚ (γₚ, cₚ)) (tₚ γₚ)

-- DTT, non-dependent eliminator

data PNat : Tm ∙ Nat → Set where
  Pzero : PNat zero
  Psuc  : ∀ {t} → PNat t → PNat (suc t)

indPNat : ∀ {i}(P : ∀ {t} → PNat t → Set i)
	→ P Pzero
	→ (∀ {t}{tₚ : PNat t} → P tₚ → P (Psuc tₚ))
	→ ∀ {t}(tₚ : PNat t) → P tₚ
indPNat P uₚ vₚ Pzero     = uₚ
indPNat P uₚ vₚ (Psuc tₚ) = vₚ (indPNat P uₚ vₚ tₚ)

recPNat : ∀ {i}(C : Tm ∙ Nat → Set i)
	→ C zero
	→ (∀ {t} → C t → C (suc t))
	→ ∀ {t} → PNat t → C t
recPNat C uₚ vₚ tₚ = indPNat (λ {t} _ → C t) uₚ (λ {t} _ → vₚ t) tₚ

Nat-Prec : ∀ {i C}(Cₚ : Tm ∙ C → Set i)
	   {u : Tm ∙ C}{v : Tm (∙ ▷ C) (C[p])}{t : Tm ∙ Nat}
	 → Cₚ u
	 → (∀ {c} → Cₚ c → Cₚ (v[id, c]))
	 → PNat t → Cₚ (rec u v t)
Nat-Prec Cₚ {u}{v} uₚ vₚ tₚ = recPNat (λ t → Cₚ (rec u v t)) uₚ vₚ tₚ

rec : ∀ {Γ C} → Tm Γ C → Tm (Γ ▷ C) (C[p]) → Tm Γ Nat → Tm Γ C
rec u v zero    = u
rec u v (suc t) = v[id, rec u v t]
(rec u v t)[σ] = rec (u[σ]) (v[σ⁺]) (t[σ])

recₚ : ∀ {i Γ C u v t}{Γₚ : Sub ∙ Γ → Set}{Cₚ : ∀ {ν} → Γₚ ν → Tm ∙ (C[ν]) → Set i}
     → (∀ {ν}(γₚ : Γₚ ν) → Cₚ γₚ (u[ν]))
     → (∀ {ν}(γcₚ : Σ (Γₚ (p ∘ ν)) (λ γₚ → Cₚ γₚ (q[ν]))) → Cₚ (proj₁ γcₚ) (v[ν]))
     → (∀ {ν}(γₚ : Γₚ ν) → PNat (t[ν]))
     → ∀ {ν}(γₚ : Γₚ ν) → Cₚ γₚ (rec (u[ν]) (v[ν⁺]) (t[ν]))
recₚ {Cₚ = Cₚ} uₚ vₚ tₚ γₚ = Nat-Prec (Cₚ γₚ) (uₚ γₚ) (λ cₚ → vₚ (γₚ, cₚ)) (tₚ γₚ)

-- DTT, dependent eliminator

data PNat : Tm ∙ Nat → Set where
  Pzero : PNat zero
  Psuc  : ∀ {t} → PNat t → PNat (suc t)

indPNat : ∀ {i}(P : ∀ {t} → PNat t → Set i)
	→ P Pzero
	→ (∀ {t}{tₚ : PNat t} → P tₚ → P (Psuc tₚ))
	→ ∀ {t}(tₚ : PNat t) → P tₚ
indPNat P uₚ vₚ Pzero     = uₚ
indPNat P uₚ vₚ (Psuc tₚ) = vₚ (indPNat P uₚ vₚ tₚ)

Nat-Pind : ∀ {i}{C : Ty (∙ ▷ Nat)}(Cₚ : ∀ {t} → PNat t → Tm ∙ (C[id, t]) → Set i)
	   {u : Tm ∙ (C[id, zero])}{v : Tm (∙ ▷ Nat ▷ C) (C[p², suc 1])}{t : Tm ∙ Nat}
	 → Cₚ Pzero u
	 → (∀ {t}{tₚ : PNat t}{c} → Cₚ tₚ c → Cₚ (Psuc tₚ) (v[id, t, c]))
	 → (tₚ : PNat t) → Cₚ tₚ (ind C u v t)
Nat-Pind Cₚ {u}{v} uₚ vₚ tₚ = indPNat (λ {t} tₚ → Cₚ tₚ (ind C u v t)) uₚ vₚ tₚ

ind : ∀ {Γ}(C : Ty (Γ ▷ Nat))
    → Tm Γ (C[id, zero])
    → Tm (Γ ▷ Nat ▷ C) (C[p², suc 1])
    → (t : Tm Γ Nat)
    → Tm Γ (C[id, t])
ind C u v zero    = u
ind C u v (suc t) = v[id, t, ind C u v t]
(ind C u v t)[σ] = ind (C[σ⁺]) (u[σ]) (v[σ⁺⁺]) (t[σ])

Natₚ : ∀ {ν} → Γₚ ν → Tm ∙ Nat → Set
Natₚ = λ _ → PNat

zeroₚ : ∀ {Γ}{Γₚ : Sub ∙ Γ → Set}
      → ∀ {ν} → Γₚ ν → PNat zero
zeroₚ = λ _ → Pzero

sucₚ : ∀ {Γ t}{Γₚ : Sub ∙ Γ → Set}
     → (∀ {ν} → Γₚ ν → PNat (t[ν]))
     → ∀ {ν} → Γₚ ν → PNat (suc (t[ν]))
sucₚ tₚ = λ γₚ → Psuc (tₚ γₚ)

indₚ : ∀ {i Γ C u v t}{Γₚ : Sub ∙ Γ → Set}
       {Cₚ : ∀ {ν} → Σ (Γₚ (p ∘ ν)) (λ γₚ → PNat (q[ν])) → Tm ∙ (C[ν]) → Set i}
     → (∀ {ν}(γₚ : Γₚ ν) → Cₚ (γₚ, Pzero) (u[ν]))
     → (∀ {ν}(γtcₚ : Σ (Σ (Γₚ (p² ∘ ν)) (λ γₚ → PNat q[p ∘ ν])) (λ γtₚ → Cₚ γtₚ (q[ν])))
        → Cₚ (proj₁ (proj₁ γtcₚ), Psuc (proj₂ (proj₁ γtcₚ))) (v[ν]))
     → (tₚ : ∀ {ν}(γₚ : Γₚ ν) → PNat (t[ν]))
     → ∀ {ν}(γₚ : Γₚ ν) → Cₚ (γₚ, tₚ γₚ) (ind (C[ν⁺]) (u[ν]) (v[ν⁺⁺]) (t[ν]))
indₚ {Cₚ = Cₚ} uₚ vₚ tₚ {ν} γₚ = Nat-Pind (λ {t} tₚ → Cₚ (γₚ, tₚ))
  (uₚ γₚ) (λ {t}{tₚ}{c} cₚ → vₚ {ν, t, c} (γₚ, tₚ, cₚ)) (tₚ γₚ)

---------------------------------------------------------------------------------------------

------------------------------------
-- List
------------------------------------

List : ∀ {Γ} → Ty Γ → Ty Γ
(List A)[σ] = List (A[σ])
nil : ∀ {Γ A} → Tm Γ (List A)
nil[σ] = nil
cons : ∀ {Γ A} → Tm Γ A → Tm Γ (List A) → Tm Γ (List A)
(cons t u)[σ] = cons (t[σ]) (u[σ])
ind : ∀ {Γ A}(C : Ty (Γ ▷ List A))
    → Tm Γ (C[id, nil])
    → Tm (Γ ▷ A ▷ List (A[p]) ▷ C[p², 0]) (C[p³, cons 2 1])
    → (t : Tm Γ (List A)) → Tm Γ (C[id, t])
(ind C u v t)[σ] = ind (C[σ⁺]) (u[σ]) (v[σ⁺⁺⁺]) (t[σ])
ind C u v nil        = u
ind C u v (cons a t) = v[id, a, t, ind C u v t]

data PList {i A}(Aₚ : Tm ∙ A → Set i)
       : Tm ∙ (List A) → Set where
  Pnil  : PList Aₚ nil
  Pcons : ∀ {a t} → Aₚ a → PList Aₚ t → PList Aₚ (cons a t)

indPList : ∀ {i j A}{Aₚ : Tm ∙ A → Set i}
	   (P : ∀ {t} → PList Aₚ t → Set j)
	 → P Pnil
	 → (∀ {a t}(aₚ : Aₚ a){tₚ : PList Aₚ t} → P tₚ → P (Pcons aₚ tₚ))
	 → ∀ {t}(tₚ : PList Aₚ t) → P tₚ
indPList P uₚ vₚ Pnil          = uₚ
indPList P uₚ vₚ (Pcons aₚ tₚ) = vₚ aₚ (indPList P uₚ vₚ tₚ)

List-Pind : ∀ {i j A}{C : Ty j (∙ ▷ List A)}
	    {Aₚ : Tm ∙ A → Set i}(Cₚ : ∀ {t} → PList Aₚ t → Tm ∙ (C[id, t]) → Set j)
	    {u : Tm ∙ (C[id, nil])}
	    {v : Tm (∙ ▷ A ▷ List (A[p]) ▷ C[p², 0]) (C[p³, cons 2 1])}
	    {t : Tm ∙ (List A)}
	  → Cₚ Pnil u
	  → (∀ {a t c}(aₚ : Aₚ a){tₚ : PList Aₚ t}
	     → Cₚ tₚ c → Cₚ (Pcons aₚ tₚ) (v[id, a, t, c]))
	  → (tₚ : PList Aₚ t) → Cₚ tₚ (ind C u v t)
List-Pind Cₚ {u}{v} uₚ vₚ tₚ =
  indPList (λ {t} tₚ → Cₚ tₚ (ind C u v t))
           uₚ (λ {a}{t} aₚ {tₚ} cₚ → vₚ {a}{t}{ind C u v t} aₚ {tₚ} cₚ) tₚ

Listₚ : ∀ {x i Γ A}{Γₚ : Sub ∙ Γ → Set x}
      → (∀ {ν} → Γₚ ν → Tm ∙ (A[ν]) → Set i)
      → ∀ {ν} → Γₚ ν → Tm ∙ (List (A[ν])) → Set
Listₚ Aₚ = λ γₚ → PList (Aₚ γₚ)

nilₚ : ∀ {x i Γ A}{Γₚ : Sub ∙ Γ → Set x}
       {Aₚ : ∀ {ν} → Γₚ ν → Tm ∙ (A[ν]) → Set i}
     → ∀ {ν}(γₚ : Γₚ ν) → PList (Aₚ γₚ) nil
nilₚ = λ γₚ → Pnil

consₚ : ∀ {x i Γ A a t}{Γₚ : Sub ∙ Γ → Set x}
      	{Aₚ : ∀ {ν} → Γₚ ν → Tm ∙ (A[ν]) → Set i}
      → (∀ {ν}(γₚ : Γₚ ν) → Aₚ γₚ (a[ν]))
      → (∀ {ν}(γₚ : Γₚ ν) → PList (Aₚ γₚ) (t[ν]))
      → ∀ {ν}(γₚ : Γₚ ν) → PList (Aₚ γₚ) (cons (a[ν]) (t[ν]))
consₚ aₚ tₚ = λ γₚ → Pcons (aₚ γₚ) (tₚ γₚ)

indₚ : ∀ {x i j Γ A}{C : Ty j (Γ ▷ List A)}
       {u : Tm Γ (C[id, nil])}
       {v : Tm (Γ ▷ A ▷ List (A[p]) ▷ C[p², 0]) (C[p³, cons 2 1])}
       {t : Tm Γ (List A)}
       {Γₚ : Sub ∙ Γ → Set x}{Aₚ : ∀ {ν} → Γₚ ν → Tm ∙ (A[ν]) → Set i}
       (Cₚ : ∀ {ν} → Σ (Γₚ (p ∘ ν)) (λ γₚ → PList (Aₚ γₚ) (q[ν]))
                   → Tm ∙ (C[ν]) → Set j)
     → (∀ {ν}(γₚ : Γₚ ν) → Cₚ (γₚ, Pnil) (u[ν]))
     → (∀ {ν}(γatcₚ : Σ (Σ (Σ (Γₚ (p³ ∘ ν))
                              (λ γₚ → Aₚ γₚ (q[p² ∘ ν])))
			      (λ γaₚ → PList (Aₚ (proj₁ γaₚ)) (q[p ∘ ν])))
                              (λ γatₚ → Cₚ (proj₁ (proj₁ γatₚ), proj₂ γatₚ) (q[ν])))
	     → Cₚ (proj₁ (proj₁ (proj₁ γatcₚ)),
	           Pcons (proj₂ (proj₁ (proj₁ γatcₚ))) (proj₂ (proj₁ γatcₚ))) (v[ν]))
     → (tₚ : ∀ {ν}(γₚ : Γₚ ν) → PList (Aₚ γₚ) (t[ν]))
     → ∀ {ν}(γₚ : Γₚ ν) → Cₚ (γₚ, tₚ γₚ) (ind (C[ν⁺]) (u[ν]) (v[ν⁺⁺⁺]) (t[ν]))
indₚ {u = u}{v} Cₚ uₚ vₚ tₚ = λ γₚ →
  -- List-Pind {Aₚ = Aₚ γₚ} (λ tₚ → Cₚ (γₚ, tₚ))
  --          (uₚ γₚ) (λ {a t c} aₚ {tₚ} cₚ → vₚ {ν, a, t, c} (γₚ, aₚ, tₚ, cₚ)) (tₚ γₚ)
  indPList {Aₚ = Aₚ γₚ} (λ {t} tₚ → Cₚ (γₚ, tₚ) (ind (C[ν⁺]) (u[ν]) (v[ν⁺⁺⁺]) t))
           (uₚ γₚ)
           (λ {a t} aₚ {tₚ} cₚ
	      → vₚ {ν, a, t, ind (C[ν⁺]) (u[ν]) (v[ν⁺⁺⁺]) t} (γₚ, aₚ, tₚ, cₚ))
	   (tₚ γₚ)

------------------------------------
-- Vec v1
------------------------------------

Vec : ∀ {Γ} → Ty j Γ → Ty j (Γ ▷ Nat)
(Vec A)[σ⁺] = Vec (A[σ])
nil : ∀ {Γ A} → Tm Γ (Vec A[id, zero])
nil[σ] = nil
cons : ∀ {Γ A} → Tm Γ A → ∀ n → Tm Γ (Vec A[id, n]) → Tm Γ (Vec A[id, suc n])
(cons a n t)[σ] = cons (a[σ]) (n[σ]) (t[σ])
ind : ∀ {Γ A}(C : Ty (Γ ▷ Nat ▷ Vec A))
    → Tm Γ (C[id, zero, nil])
    → Tm (Γ ▷ A ▷ Nat ▷ Vec A[p², 0] ▷ C[p³, 1, 0]) (C[p⁴, suc 2, cons 3 2 1])
    → ∀ n (t : Tm Γ (Vec A[id, n])) → Tm Γ (C[id, n, t])
(ind C u v n t)[σ] = ind (C[σ⁺⁺]) (u[σ]) (v[σ⁺⁺⁺⁺]) (n[σ]) (t[σ])
ind C u v .zero    nil          = u
ind C u v .(suc n) (cons a n t) = v[id, a, n, t, ind C u v n t]

data PVec {i A}(Aₚ : Tm ∙ A → Set i)
       : ∀ {n} → PNat n → Tm ∙ (Vec A[id, n]) → Set where
  Pnil  : PVec Aₚ Pzero nil
  Pcons : ∀ {a n t} → Aₚ a → ∀ nₚ → PVec Aₚ nₚ t → PVec Aₚ (Psuc nₚ) (cons a n t)

indPVec : ∀ {i j A}{Aₚ : Tm ∙ A → Set i}
	  (P : ∀ {n t}(nₚ : PNat n) → PVec Aₚ nₚ t → Set j)
	→ P Pzero Pnil
	→ (∀ {a n t}(aₚ : Aₚ a)(nₚ : PNat n){tₚ : PVec Aₚ nₚ t}
	     → P nₚ tₚ → P (Psuc nₚ) (Pcons aₚ nₚ tₚ))
	→ ∀ {n t}(nₚ : PNat n)(tₚ : PVec Aₚ nₚ t) → P nₚ tₚ
indPVec P uₚ vₚ .Pzero     Pnil             = uₚ
indPVec P uₚ vₚ .(Psuc nₚ) (Pcons aₚ nₚ tₚ) = vₚ aₚ nₚ (indPVec P uₚ vₚ nₚ tₚ)

Vecₚ : ∀ {x i Γ A}{Γₚ : Sub ∙ Γ → Set x}
     → (∀ {ν} → Γₚ ν → Tm ∙ (A[ν]) → Set i)
     → ∀ {ν} → Σ (Γₚ (p ∘ ν)) (λ γₚ → PNat (q[ν])) → Tm ∙ (Vec A[ν]) → Set
Vecₚ Aₚ = λ γnₚ → PVec (Aₚ (p₁ γnₚ)) (p₂ γnₚ)

nilₚ : ∀ {x i Γ A}{Γₚ : Sub ∙ Γ → Set x}{Aₚ : ∀ {ν} → Γₚ ν → Tm ∙ (A[ν]) → Set i}
     → ∀ {ν}(γₚ : Γₚ ν) → PVec (Aₚ γₚ) Pzero nil
nilₚ = λ γₚ → Pnil

consₚ : ∀ {x i Γ A a n t}{Γₚ : Sub ∙ Γ → Set x}{Aₚ : ∀ {ν} → Γₚ ν → Tm ∙ (A[ν]) → Set i}
      → (∀ {ν}(γₚ : Γₚ ν) → Aₚ γₚ (a[ν]))
      → (nₚ : ∀ {ν}(γₚ : Γₚ ν) → PNat (n[ν]))
      → (∀ {ν}(γₚ : Γₚ ν) → PVec (Aₚ γₚ) (nₚ γₚ) (t[ν]))
      → ∀ {ν}(γₚ : Γₚ ν) → PVec (Aₚ γₚ) (Psuc (nₚ γₚ)) (cons (a[ν]) (n[ν]) (t[ν]))
consₚ aₚ nₚ tₚ = λ γₚ → Pcons (aₚ γₚ) (nₚ γₚ) (tₚ γₚ)

indₚ : ∀ {x i j Γ A C u v n t}
       {Γₚ : Sub ∙ Γ → Set x}{Aₚ : ∀ {ν} → Γₚ ν → Tm ∙ (A[ν]) → Set i}
       (Cₚ : ∀ {ν}(γntₚ : Σ (Σ (Γₚ (p² ∘ ν))
                               (λ γₚ → PNat (q[p ∘ ν])))
			       (λ γnₚ → PVec (Aₚ (p₁ γnₚ)) (p₂ γnₚ) (q[ν])))
	          → Tm ∙ (C[ν]) → Set j)
     → (∀ {ν}(γₚ : Γₚ ν) → Cₚ (γₚ, Pzero, Pnil) (u[ν]))
     → (∀ {ν}(γantcₚ : Σ (Σ (Σ (Σ
                 (Γₚ (p⁴ ∘ ν))
		 (λ γₚ → Aₚ γₚ (q[p³ ∘ ν])))
		 (λ γaₚ → PNat (q[p² ∘ ν])))
		 (λ γanₚ → PVec (Aₚ (p₁ (p₁ γanₚ)) (p₂ γanₚ) (q[p ∘ ν]))))
		 (λ γantₚ → Cₚ (p₁ (p₁ (p₁ γantₚ)), p₂ (p₁ γantₚ), p₂ γantₚ) (q[ν])))
           → Cₚ (p₁ (p₁ (p₁ (p₁ γantₚ))),
	         Psuc (p₂ (p₁ (p₁ γantₚ))),
		 Pcons (p₂ (p₁ (p₁ (p₁ γantₚ)))) (p₂ (p₁ (p₁ γantₚ))) (p₂ (p₁ γantₚ))) (v[ν]))
     → (nₚ : ∀ {ν}(γₚ : Γₚ ν) → PNat (n[ν]))
     → (tₚ : ∀ {ν}(γₚ : Γₚ ν) → PVec (Aₚ γₚ) (nₚ γₚ) (t[ν]))
     → ∀ {ν}(γₚ : Γₚ ν) → Cₚ (γₚ, nₚ γₚ, tₚ γₚ) (ind (C[ν⁺⁺]) (u[ν]) (v[ν⁺⁺⁺⁺]) (n[ν]) (t[ν]))
indₚ {Aₚ = Aₚ} Cₚ uₚ vₚ nₚ tₚ = λ {ν} γₚ →
  indPVec {A = A[ν]}{Aₚ = Aₚ γₚ}
          (λ {n}{t} nₚ tₚ → Cₚ {ν, n, t} (γₚ, nₚ, tₚ) (ind (C[ν⁺⁺]) (u[ν]) (v[ν⁺⁺⁺⁺]) n t))
	  (uₚ γₚ)
	  (λ {a}{n}{t} aₚ nₚ {tₚ} cₚ →
	     vₚ {ν, a, n, t, ind (C[ν⁺⁺]) (u[ν]) (v[ν⁺⁺⁺⁺]) n t} (γₚ, aₚ, nₚ, tₚ, cₚ))
	  (nₚ γₚ) (tₚ γₚ)

------------------------------------
-- Vec v2
------------------------------------

Vec : ∀ {Γ} → Ty j Γ → Tm Γ Nat → Ty j Γ
(Vec A n)[σ] = Vec (A[σ]) (n[σ])
nil : ∀ {Γ A} → Tm Γ (Vec A zero)
nil[σ] = nil
cons : ∀ {Γ A} → Tm Γ A → ∀ n → Tm Γ (Vec A n) → Tm Γ (Vec A (suc n))
(cons a n t)[σ] = cons (a[σ]) (n[σ]) (t[σ])
ind : ∀ {Γ A}(C : Ty (Γ ▷ Nat ▷ Vec (A[p]) 0))
    → Tm Γ (C[id, zero, nil])
    → Tm (Γ ▷ A ▷ Nat ▷ Vec (A[p²]) 0 ▷ C[p³, 1, 0]) (C[p⁴, suc 2, cons 3 2 1])
    → ∀ n (t : Tm Γ (Vec A n)) → Tm Γ (C[id, n, t])
(ind C u v n t)[σ] = ind (C[σ⁺⁺]) (u[σ]) (v[σ⁺⁺⁺⁺]) (n[σ]) (t[σ])
ind C u v .zero    nil          = u
ind C u v .(suc n) (cons a n t) = v[id, a, n, t, ind C u v n t]

data PVec {i A}(Aₚ : Tm ∙ A → Set i)
       : ∀ {n} → PNat n → Tm ∙ (Vec A n) → Set where
  Pnil  : PVec Aₚ Pzero nil
  Pcons : ∀ {a n t} → Aₚ a → ∀ nₚ → PVec Aₚ nₚ t → PVec Aₚ (Psuc nₚ) (cons a n t)

indPVec : ∀ {i j A}{Aₚ : Tm ∙ A → Set i}
	  (P : ∀ {n t}(nₚ : PNat n) → PVec Aₚ nₚ t → Set j)
	→ P Pzero Pnil
	→ (∀ {a n t}(aₚ : Aₚ a)(nₚ : PNat n){tₚ : PVec Aₚ nₚ t}
	     → P nₚ tₚ → P (Psuc nₚ) (Pcons aₚ nₚ tₚ))
	→ ∀ {n t}(nₚ : PNat n)(tₚ : PVec Aₚ nₚ t) → P nₚ tₚ
indPVec P uₚ vₚ .Pzero     Pnil             = uₚ
indPVec P uₚ vₚ .(Psuc nₚ) (Pcons aₚ nₚ tₚ) = vₚ aₚ nₚ (indPVec P uₚ vₚ nₚ tₚ)

Vecₚ : ∀ {x i Γ A n}{Γₚ : Sub ∙ Γ → Set x}
     → (∀ {ν} → Γₚ ν → Tm ∙ (A[ν]) → Set i)
     → (∀ {ν}(γₚ : Γₚ ν) → PNat (n[ν]))
     → ∀ {ν} → Γₚ ν → Tm ∙ (Vec (A[ν]) (n[ν])) → Set
Vecₚ Aₚ nₚ = λ γₚ → PVec (Aₚ γₚ) (nₚ γₚ)

nilₚ : ∀ {x i Γ A}{Γₚ : Sub ∙ Γ → Set x}{Aₚ : ∀ {ν} → Γₚ ν → Tm ∙ (A[ν]) → Set i}
     → ∀ {ν}(γₚ : Γₚ ν) → PVec (Aₚ γₚ) Pzero nil
nilₚ = λ γₚ → Pnil

consₚ : ∀ {x i Γ A a n t}{Γₚ : Sub ∙ Γ → Set x}{Aₚ : ∀ {ν} → Γₚ ν → Tm ∙ (A[ν]) → Set i}
      → (∀ {ν}(γₚ : Γₚ ν) → Aₚ γₚ (a[ν]))
      → (nₚ : ∀ {ν}(γₚ : Γₚ ν) → PNat (n[ν]))
      → (∀ {ν}(γₚ : Γₚ ν) → PVec (Aₚ γₚ) (nₚ γₚ) (t[ν]))
      → ∀ {ν}(γₚ : Γₚ ν) → PVec (Aₚ γₚ) (Psuc (nₚ γₚ)) (cons (a[ν]) (n[ν]) (t[ν]))
consₚ aₚ nₚ tₚ = λ γₚ → Pcons (aₚ γₚ) (nₚ γₚ) (tₚ γₚ)

indₚ : ∀ {x i j Γ A C u v n t}
       {Γₚ : Sub ∙ Γ → Set x}{Aₚ : ∀ {ν} → Γₚ ν → Tm ∙ (A[ν]) → Set i}
       (Cₚ : ∀ {ν}(γntₚ : Σ (Σ (Γₚ (p² ∘ ν))
                               (λ γₚ → PNat (q[p ∘ ν])))
			       (λ γnₚ → PVec (Aₚ (p₁ γnₚ)) (p₂ γnₚ) (q[ν])))
	          → Tm ∙ (C[ν]) → Set j)
     → (∀ {ν}(γₚ : Γₚ ν) → Cₚ (γₚ, Pzero, Pnil) (u[ν]))
     → (∀ {ν}(γantcₚ : Σ (Σ (Σ (Σ
                 (Γₚ (p⁴ ∘ ν))
		 (λ γₚ → Aₚ γₚ (q[p³ ∘ ν])))
		 (λ γaₚ → PNat (q[p² ∘ ν])))
		 (λ γanₚ → PVec (Aₚ (p₁ (p₁ γanₚ)) (p₂ γanₚ) (q[p ∘ ν]))))
		 (λ γantₚ → Cₚ (p₁ (p₁ (p₁ γantₚ)), p₂ (p₁ γantₚ), p₂ γantₚ) (q[ν])))
           → Cₚ (p₁ (p₁ (p₁ (p₁ γantₚ))),
	         Psuc (p₂ (p₁ (p₁ γantₚ))),
		 Pcons (p₂ (p₁ (p₁ (p₁ γantₚ)))) (p₂ (p₁ (p₁ γantₚ))) (p₂ (p₁ γantₚ))) (v[ν]))
     → (nₚ : ∀ {ν}(γₚ : Γₚ ν) → PNat (n[ν]))
     → (tₚ : ∀ {ν}(γₚ : Γₚ ν) → PVec (Aₚ γₚ) (nₚ γₚ) (t[ν]))
     → ∀ {ν}(γₚ : Γₚ ν) → Cₚ (γₚ, nₚ γₚ, tₚ γₚ) (ind (C[ν⁺⁺]) (u[ν]) (v[ν⁺⁺⁺⁺]) (n[ν]) (t[ν]))
indₚ {Aₚ = Aₚ} Cₚ uₚ vₚ nₚ tₚ = λ {ν} γₚ →
  indPVec {A = A[ν]}{Aₚ = Aₚ γₚ}
          (λ {n}{t} nₚ tₚ → Cₚ {ν, n, t} (γₚ, nₚ, tₚ) (ind (C[ν⁺⁺]) (u[ν]) (v[ν⁺⁺⁺⁺]) n t))
	  (uₚ γₚ)
	  (λ {a}{n}{t} aₚ nₚ {tₚ} cₚ →
	     vₚ {ν, a, n, t, ind (C[ν⁺⁺]) (u[ν]) (v[ν⁺⁺⁺⁺]) n t} (γₚ, aₚ, nₚ, tₚ, cₚ))
	  (nₚ γₚ) (tₚ γₚ)

------------------------------------
-- W
------------------------------------

data W (I : Set a)(S : I → Set b)(P : (i : I) → S i → I → Set c) : I → Set (a ⊔ b ⊔ c) where
  sup : (i : I)(s : S i) → ((j : I) → P i s j → W I S P j) → W I S P i

indW : ∀ {a b c d}{I : Set a}{S : I → Set b}{P : (i : I) → S i → I → Set c}
      (C : (i : I) → W I S P i → Set d)
    → ((i : I)(s : S i)(f : (j : I) → P i s j → W I S P j)
       → ((j : I)(p : P i s j) → C j (f j p)) → C i (sup i s f))
    → (i : I)(w : W I S P i) → C i w
indW C v .i (sup i s f) = v i s f (λ j p → indW C v j (f j p))

W : ∀ {Γ}(I : Ty a Γ)(S : Ty b (Γ ▷ I)) → Ty c (Γ ▷ I ▷ S ▷ I[p²]) → Ty (a ⊔ b ⊔ c) (Γ ▷ I)
(W I S P)[σ⁺] = W (I[σ]) (S[σ⁺]) (P[σ⁺⁺⁺])
sup : ∀ {Γ I S P}
      (i : Tm Γ I)(s : Tm Γ (S[id, i]))
    → Tm Γ (Π I (P[(id, i, s)⁺] ⇒ W I S P))
    → Tm Γ (W I S P[id, i])
(sup i s f)[σ] = sup (i[σ]) (s[σ]) (f[σ])
ind : ∀ {Γ I S P}(C : Ty d (Γ ▷ I ▷ W I S P))
    → Tm (Γ ▷ I ▷ S ▷ Π (I[p²]) (P ⇒ W I S P[(p²)⁺])
            ▷ Π (I[p³]) (Π (P[p⁺]) (C[p⁵, 1, 2 $ 1 $ 0]))) (C[p³, sup 3 2 1])
    → (i : Tm Γ I)(w : Tm Γ (W I S P[id, i])) → Tm Γ (C[id, i, w])
(ind C v i w)[σ] = ind (C[σ⁺⁺]) (v[σ⁺⁺⁺⁺]) (i[σ]) (w[σ])
ind C v .i (sup i s f) = v[id, i, s, f, lam (lam (ind (C[(p²)⁺⁺]) (v[(p²)⁺⁺⁺⁺]) 1 (f[p²] $ 1 $ 0)))]

data PW {a b c}{I : Ty a ∙}{S : Ty b (∙ ▷ I)}{P : Ty c (∙ ▷ I ▷ S ▷ I[p²])}
     	(Iₚ : Tm ∙ I → Set a)(Sₚ : ∀ {i} → Iₚ i → Tm ∙ (S[id, i]) → Set b)
	(Pₚ : ∀ {i s j}(iₚ : Iₚ i) → Sₚ iₚ s → Iₚ j → Tm ∙ (P[id, i, s, j]) → Set c)
	: ∀ {i} → Iₚ i → Tm ∙ (W I S P[id, i]) → Set (a ⊔ b ⊔ c) where
  Psup : ∀ {i s f}(iₚ : Iₚ i)(sₚ : Sₚ iₚ s)
       → (∀ {j p}(jₚ : Iₚ j) → Pₚ iₚ sₚ jₚ p → PW Iₚ Sₚ Pₚ jₚ (f $ j $ p))
       → PW Iₚ Sₚ Pₚ iₚ (sup i s f)

indPW : ∀ {a b c d}{I : Ty a ∙}{S : Ty b (∙ ▷ I)}{P : Ty c (∙ ▷ I ▷ S ▷ I[p²])}
        {Iₚ : Tm ∙ I → Set a}{Sₚ : ∀ {i} → Iₚ i → Tm ∙ (S[id, i]) → Set b}
	{Pₚ : ∀ {i s j}(iₚ : Iₚ i) → Sₚ iₚ s → Iₚ j → Tm ∙ (P[id, i, s, j]) → Set c}
        (C : ∀ {i w}(iₚ : Iₚ i) → PW Iₚ Sₚ Pₚ iₚ w → Set d)
      → (∀ {i s f}(iₚ : Iₚ i)(sₚ : Sₚ iₚ s)
           {fₚ : ∀ {j p}(jₚ : Iₚ j) → Pₚ iₚ sₚ jₚ p → PW Iₚ Sₚ Pₚ jₚ (f $ j $ p)}
	 → (∀ {j p}(jₚ : Iₚ j)(pₚ : Pₚ iₚ sₚ jₚ p) → C jₚ (fₚ jₚ pₚ))
	 → C iₚ (Psup iₚ sₚ fₚ))
      → ∀ {i w}(iₚ : Iₚ i)(wₚ : PW Iₚ Sₚ Pₚ iₚ w) → C iₚ wₚ
indPW C vₚ .iₚ (Psup iₚ sₚ fₚ) = vₚ iₚ sₚ fₚ (λ jₚ pₚ → indPW C vₚ jₚ (fₚ jₚ pₚ))

Wₚ : ∀ {Γ I S P}{Γₚ : Sub ∙ Γ → Set x}
     (Iₚ : ∀ {ν} → Γₚ ν → Tm ∙ (I[ν]) → Set a)
     (Sₚ : ∀ {ν} → Σ (Γₚ (p ∘ ν)) (λ γₚ → Iₚ γₚ (q[ν])) → Tm ∙ (S[ν]) → Set b)
   → (∀ {ν} → Σ (Σ (Σ
        (Γₚ (p³ ∘ ν))
	(λ γₚ → Iₚ γₚ (q[p² ∘ ν])))
	(λ γiₚ → Sₚ γiₚ (q[p ∘ ν])))
	(λ γisₚ → Iₚ (p₁ (p₁ γisₚ)) (q[ν]))
      → Tm ∙ (P[ν]) → Set c)
   → (∀ {ν} → Σ (Γₚ (p ∘ ν)) (λ γₚ → Iₚ γₚ (q[ν])) → Tm ∙ (W I S P[ν]) → Set (a ⊔ b ⊔ c))
Wₚ Iₚ Sₚ Pₚ = λ γiₚ →
  PW (Iₚ (p₁ γiₚ)) (λ iₚ → Sₚ (p₁ γiₚ, iₚ)) (λ iₚ sₚ jₚ → Pₚ (p₁ γiₚ, iₚ, sₚ, jₚ)) (p₂ γiₚ)

supₚ : ∀ {Γ I S P i s f}{Γₚ : Sub ∙ Γ → Set x}
         {Iₚ : ∀ {ν} → Γₚ ν → Tm ∙ (I[ν]) → Set a}
	 {Sₚ : ∀ {ν} → Σ (Γₚ (p ∘ ν)) (λ γₚ → Iₚ γₚ (q[ν])) → Tm ∙ (S[ν]) → Set b}
	 {Pₚ : ∀ {ν} → Σ (Σ (Σ
	         (Γₚ (p³ ∘ ν))
	         (λ γₚ → Iₚ γₚ (q[p² ∘ ν])))
	         (λ γiₚ → Sₚ γiₚ (q[p ∘ ν])))
	         (λ γisₚ → Iₚ (p₁ (p₁ γisₚ)) (q[ν]))
	       → Tm ∙ (P[ν]) → Set c}
     → (iₚ : ∀ {ν}(γₚ : Γₚ ν) → Iₚ γₚ (i[ν]))
     → (sₚ : ∀ {ν}(γₚ : Γₚ ν) → Sₚ (γₚ, iₚ γₚ) (s[ν]))
     → (∀ {ν}(γₚ : Γₚ ν)
        → ∀ {j}(jₚ : Iₚ γₚ j)
	→ ∀ {p} → Pₚ (γₚ, iₚ γₚ, sₚ γₚ, jₚ) p
	→ PW (Iₚ γₚ) (λ iₚ → Sₚ (γₚ, iₚ)) (λ iₚ sₚ jₚ → Pₚ (γₚ, iₚ, sₚ, jₚ))
	     jₚ (f[ν] $ j $ p))
     → (∀ {ν}(γₚ : Γₚ ν)
        → PW (Iₚ γₚ) (λ iₚ → Sₚ (γₚ, iₚ)) (λ iₚ sₚ jₚ → Pₚ (γₚ, iₚ, sₚ, jₚ))
	     (iₚ γₚ) (sup (i[ν]) (s[ν]) (f[ν])))
supₚ iₚ sₚ fₚ = λ γₚ → Psup (iₚ γₚ) (sₚ γₚ) (λ {j}{p} jₚ pₚ → fₚ γₚ {j} jₚ {p} pₚ)

indₚ : ∀ {Γ I S P C v i w}{Γₚ : Sub ∙ Γ → Set x}
       {Iₚ : ∀ {ν} → Γₚ ν → Tm ∙ (I[ν]) → Set a}
       {Sₚ : ∀ {ν} → Σ (Γₚ (p ∘ ν)) (λ γₚ → Iₚ γₚ (q[ν])) → Tm ∙ (S[ν]) → Set b}
       {Pₚ : ∀ {ν} → Σ (Σ (Σ
	       (Γₚ (p³ ∘ ν))
	       (λ γₚ → Iₚ γₚ (q[p² ∘ ν])))
	       (λ γiₚ → Sₚ γiₚ (q[p ∘ ν])))
	       (λ γisₚ → Iₚ (p₁ (p₁ γisₚ)) (q[ν]))
	     → Tm ∙ (P[ν]) → Set c}
       (Cₚ : ∀ {ν} → Σ (Σ
               (Γₚ (p² ∘ ν))
	       (λ γₚ → Iₚ γₚ (q[p ∘ ν])))
	       (λ γiₚ → PW (Iₚ (p₁ γiₚ)) (λ iₚ → Sₚ (p₁ γiₚ, iₚ))
	                   (λ iₚ sₚ jₚ → Pₚ (p₁ γiₚ, iₚ, sₚ, jₚ)) (p₂ γiₚ) (q[ν]))
	   → Tm ∙ (C[ν]) → Set d)
     → (∀ {ν}(γisfcₚ : Σ (Σ (Σ (Σ
          (Γₚ (p⁴ ∘ ν))
	  (λ γₚ → Iₚ γₚ (q[p³ ∘ ν])))
	  (λ γiₚ → Sₚ γiₚ (q[p² ∘ ν])))
	  (λ γisₚ → ∀ {j}(jₚ : Iₚ (p₁ (p₁ γisₚ)) j)
	          → ∀ {p} → Pₚ (γisₚ, jₚ) p
		  → PW (Iₚ (p₁ (p₁ γisₚ))) (λ iₚ → Sₚ (p₁ (p₁ γisₚ), iₚ))
		       (λ iₚ sₚ jₚ → Pₚ (p₁ (p₁ γisₚ), iₚ, sₚ, jₚ)) jₚ (q[p ∘ ν] $ j $ p)))
          (λ γisfₚ → ∀ {j}(jₚ : Iₚ (p₁ (p₁ (p₁ γisfₚ))) j)
	           → ∀ {p}(pₚ : Pₚ (p₁ γisfₚ, jₚ) p)
		   → Cₚ (p₁ (p₁ (p₁ γisfₚ)), jₚ, p₂ γisfₚ jₚ pₚ) (q[ν] $ j $ p)))
        → Cₚ (p₁ (p₁ (p₁ γisfcₚ)), Psup (p₂ (p₁ (p₁ (p₁ γisfcₚ))))
	                                (p₂ (p₁ (p₁ γisfcₚ)))
					(λ {j}{p} jₚ pₚ → p₂ (p₁ γisfcₚ) {j} jₚ {p} pₚ)) (v[ν]))
     → (iₚ : ∀ {ν}(γₚ : Γₚ ν) → Iₚ γₚ (i[ν]))
     → (wₚ : ∀ {ν}(γₚ : Γₚ ν) → PW (Iₚ γₚ) (λ iₚ → Sₚ (γₚ, iₚ))
                                   (λ iₚ sₚ jₚ → Pₚ (γₚ, iₚ, sₚ, jₚ)) (iₚ γₚ) (w[ν]))
     → (∀ {ν}(γₚ : Γₚ ν) → Cₚ (γₚ, iₚ γₚ, wₚ γₚ) (ind (C[ν⁺⁺]) (v[ν⁺⁺⁺⁺]) (i[ν]) (w[ν])))
indₚ {C = C}{v} Cₚ vₚ iₚ wₚ = λ {ν} γₚ →
  indPW {I[ν]}{S[ν⁺]}{P[ν⁺⁺⁺]}{Iₚ γₚ}{λ iₚ → Sₚ (γₚ, iₚ)}{λ iₚ sₚ jₚ → Pₚ (γₚ, iₚ, sₚ, jₚ)}
        (λ {i}{w} iₚ wₚ → Cₚ (γₚ, iₚ, wₚ) (ind (C[ν⁺⁺]) (v[ν⁺⁺⁺⁺]) i w))
	(λ iₚ sₚ {fₚ} cₚ → vₚ (γₚ, iₚ, sₚ, λ {j} jₚ {p} pₚ → fₚ {j}{p} jₚ pₚ,
	                                   λ {j} jₚ {p} pₚ → cₚ {j}{p} jₚ pₚ))
	(iₚ γₚ) (wₚ γₚ)

Goal: Cₚ (γₚ, iₚ, Psup iₚ sₚ fₚ)
         (v[ν, i, s, f, lam (lam (ind (C[(ν ∘ p²)⁺⁺]) (v[(ν ∘ p²)⁺⁺⁺⁺]) 1 (f[p²] $ 1 $ 0)))])
Goal: Cₚ (γₚ, jₚ, fₚ jₚ pₚ) (ind (C[ν⁺⁺]) (v[ν⁺⁺⁺⁺]) j (f $ j $ p))

t $ u $ v = app t[id, u] $ v = app (app t[id, u])[id, v] = app (app t)[(id, u)⁺][id, v] =
          = app (app t)[id, u, v]

I  : Ty a ∙
Iₚ : Tyₚ a ∙ₚ I
   = ∀ (ν : Sub ∙ ∙) → 𝟙 → Tm ∙ (I[ν]) → Set a
   ≅ Tm ∙ I → Set a
S  : Ty b (∙ ▷ I)
Sₚ : Tyₚ b (∙ₚ ▷ₚ Iₚ) S
   = ∀ (ν : Sub ∙ (∙ ▷ I)) → Σ 𝟙 (λ dₚ → Iₚ (p ∘ ν) dₚ (q[ν])) → Tm ∙ (S[ν]) → Set b
   ≅ ∀ (i : Tm ∙ I) → Iₚ i → Tm ∙ (S[id, i]) → Set b

P  : Ty c (∙ ▷ I ▷ S ▷ I[p²])
Pₚ : Tyₚ c (∙ₚ ▷ₚ Iₚ ▷ Sₚ ▷ Iₚ[pₚ²]ₚ) P
   = ∀ (ν : Sub ∙ (∙ ▷ I ▷ S ▷ I[p²]))
     → Σ (Σ (Σ 𝟙
            (λ dₚ → Iₚ (p³ ∘ ν) dₚ (q[p² ∘ ν])))
            (λ diₚ → Sₚ (p² ∘ ν) diₚ (q[p ∘ ν])))
	    (λ disₚ → Iₚ (p³ ∘ ν) (p₁ (p₁ disₚ)) (q[ν]))
     → Tm ∙ (P[ν]) → Set c
   ≅ ∀ (i : Tm ∙ I)(s : Tm ∙ (S[id, i]))(j : Tm ∙ I)
     → (dₚ : 𝟙)(iₚ : Iₚ id dₚ i)(sₚ : Sₚ (id, i) (dₚ, iₚ) s)(jₚ : Iₚ id dₚ j)
     → Tm ∙ (P[id, i, s, j]) → Set c
   ≅ ∀ (i : Tm ∙ I)(s : Tm ∙ (S[id, i]))(j : Tm ∙ I)
     → (iₚ : Iₚ i) → Sₚ i iₚ s → Iₚ j → Tm ∙ (P[id, i, s, j]) → Set c
